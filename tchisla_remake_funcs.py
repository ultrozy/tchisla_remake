import math
import fractions as fr

NAN, ONE, ZERO = float("nan"), fr.Fraction(1, 1), fr.Fraction(0, 1)
MAXEXPONENT = 200000.0
class info:
    sqrt = "√"
    def __init__(self, expr, minlen, lastop, first, second):
        self.expr = expr
        self.minlen = minlen
        self.lastop = lastop
        self.first = first
        self.second = second

infos = [[],
        
        [info("1-1", 2, "-", 1, 1),
        info("1", 1, "", None, None),
        info("1+1", 2, "+", 1, 1),
        info("1+1+1", 3, "+", 1, 2),
        info("1+1+1+1", 4, "+", 2, 2),
        info("(1+1+1)!-1", 4, "-", 6, 1),
        info("(1+1+1)!", 3, "!", 3, None),
        info("1+(1+1+1)!", 4, "+", 1, 6),
        info("11-1-1-1", 5, "-", 9, 1),
        info("11-1-1", 4, "-", 10, 1),
        info("11-1", 3, "-", 11, 1),
        info("11", 2, "", None, None),
        info("1+11", 3, "+", 1, 11),
        info("11+1+1", 4, "+", 11, 2),
        info("11+1+1+1", 5, "+", 11, 3),
        info("1+11+1+1+1", 6, "+", 12, 3),
        info("11-1+(1+1+1)!", 6, "+", 10, 6),
        info("11+(1+1+1)!", 5, "+", 11, 6),
        info("1+11+(1+1+1)!", 6, "+", 12, 6),
        info("(1+1)*(11-1)-1", 6, "-", 20, 1),
        info("(1+1)*(11-1)", 5, "*", 2, 10),
        info("11+11-1", 5, "+", 11, 10),
        info("11+11", 4, "+", 11, 11),
        info("11+1+11", 5, "+", 11, 12),
        info("(1+1+1+1)!", 4, "!", 4, None),
        info("1+(1+1+1+1)!", 5, "+", 1, 24),
        info("1+1+(1+1+1+1)!", 6, "+", 2, 24),
        info("(1+1+1)^(1+1+1)", 6, "^", 3, 3),
        info("(1+1+1)!+11+11", 7, "+", 6, 22),
        info("(11-1)*(1+1+1)-1", 7, "-", 30, 1),
        info("(11-1)*(1+1+1)", 6, "*", 10, 3),
        info("√((1+1)^(11-1))-1", 6, "-", 32, 1),
        info("√((1+1)^(11-1))", 5, "√", 1024, None),
        info("11*(1+1+1)", 5, "*", 11, 3),
        info("1+11*(1+1+1)", 6, "+", 1, 33),
        info("11+(1+1+1+1)!", 6, "+", 11, 24),
        info("(1+1+1)!^(1+1)", 5, "^", 6, 2),
        info("111/(1+1+1)", 6, "/", 111, 3),
        info("1+111/(1+1+1)", 7, "+", 1, 37),
        info("(1+1+1)*(11+1+1)", 7, "*", 3, 13),
        info("(11-1)*(1+1+1+1)", 7, "*", 10, 4),
        info("11+(11-1)*(1+1+1)", 8, "+", 11, 30),
        info("(1+1)*(11+11-1)", 7, "*", 2, 21),
        info("11*(1+1+1+1)-1", 7, "-", 44, 1),
        info("11*(1+1+1+1)", 6, "*", 11, 4),
        info("1+11*(1+1+1+1)", 7, "+", 1, 44),
        info("(1+1)*(11+1+11)", 7, "*", 2, 23),
        info("(1+1)*(1+1+1+1)!-1", 7, "-", 48, 1),
        info("(1+1)*(1+1+1+1)!", 6, "*", 2, 24),
        info("(1+(1+1+1)!)^(1+1)", 6, "^", 7, 2),
        info("(111-11)/(1+1)", 7, "/", 100, 2),
        info("1+(111-11)/(1+1)", 8, "+", 1, 50),
        info("(11+1+1)*(1+1+1+1)", 8, "*", 13, 4),
        info("√(1+1)^(1+11)-11", 7, "-", 64, 11),
        info("(111-1)/(1+1)-1", 7, "-", 55, 1),
        info("(111-1)/(1+1)", 6, "/", 110, 2),
        info("(1+111)/(1+1)", 6, "/", 112, 2),
        info("1+(1+111)/(1+1)", 7, "+", 1, 56),
        info("1+1+(1+111)/(1+1)", 8, "+", 2, 56),
        info("(11-1)*(1+1+1)!-1", 7, "-", 60, 1),
        info("(11-1)*(1+1+1)!", 6, "*", 10, 6),
        info("(11+111)/(1+1)", 7, "/", 122, 2),
        info("√(1+1)^(1+11)-1-1", 7, "-", 63, 1),
        info("√(1+1)^(1+11)-1", 6, "-", 64, 1),
        info("√(1+1)^(1+11)", 5, "^", (2, 1), 12),
        info("11*(1+1+1)!-1", 6, "-", 66, 1),
        info("11*(1+1+1)!", 5, "*", 11, 6),
        info("1+11*(1+1+1)!", 6, "+", 1, 66),
        info("1+1+11*(1+1+1)!", 7, "+", 2, 66),
        info("√(1+(1+(1+1+1)!)!)-1-1", 7, "-", 70, 1),
        info("√(1+(1+(1+1+1)!)!)-1", 6, "-", 71, 1),
        info("√(1+(1+(1+1+1)!)!)", 5, "√", 5041, None),
        info("(1+11)*(1+1+1)!", 6, "*", 12, 6),
        info("1+(1+11)*(1+1+1)!", 7, "+", 1, 72),
        info("(1+1)*111/(1+1+1)", 8, "/", 222, 3),
        info("11+√(1+1)^(1+11)", 7, "+", 11, 64),
        info("11*(1+(1+1+1)!)-1", 7, "-", 77, 1),
        info("11*(1+(1+1+1)!)", 6, "*", 11, 7),
        info("(1+1+1)!*(11+1+1)", 7, "*", 6, 13),
        info("(11-1-1)^(1+1)-1-1", 8, "-", 80, 1),
        info("(11-1-1)^(1+1)-1", 7, "-", 81, 1),
        info("(11-1-1)^(1+1)", 6, "^", 9, 2),
        info("1+(11-1-1)^(1+1)", 7, "+", 1, 81),
        info("1+1+(11-1-1)^(1+1)", 8, "+", 2, 81),
        info("(1+11)*(1+(1+1+1)!)", 7, "*", 12, 7),
        info("1+(1+11)*(1+(1+1+1)!)", 8, "+", 1, 84),
        info("111-1-(1+1+1+1)!", 8, "-", 110, 24),
        info("111-(1+1+1+1)!", 7, "-", 111, 24),
        info("11*(11-1-1-1)", 7, "*", 11, 8),
        info("√(1+11*(1+1+1)!!)", 6, "√", 7921, None),
        info("(11-1)*(11-1-1)", 7, "*", 10, 9),
        info("111-(1+1)*(11-1)", 8, "-", 111, 20),
        info("11+(11-1-1)^(1+1)", 8, "+", 11, 81),
        info("((1+1)^(11-1)-1)/11", 8, "/", 1023, 11),
        info("111-11-(1+1+1)!", 8, "-", 100, 6),
        info("1111/11-(1+1+1)!", 9, "-", 101, 6),
        info("(1+11)*(11-1-1-1)", 8, "*", 12, 8),
        info("111-1-1-1-11", 8, "-", 108, 11),
        info("111-1-1-11", 7, "-", 109, 11),
        info("111-1-11", 6, "-", 110, 11),
        info("111-11", 5, "-", 111, 11)],
        
        [info("2-2", 2, "-", 2, 2),
        info("2/2", 2, "/", 2, 2),
        info("2", 1, "", None, None),
        info("2+2/2", 3, "+", 2, 1),
        info("2+2", 2, "+", 2, 2),
        info("2+2+2/2", 4, "+", 4, 1),
        info("2+2+2", 3, "+", 2, 4),
        info("22/2-2-2", 5, "-", 9, 2),
        info("2*(2+2)", 3, "*", 2, 4),
        info("22/2-2", 4, "-", 11, 2),
        info("(22-2)/2", 4, "/", 20, 2),
        info("22/2", 3, "/", 22, 2),
        info("(2+2)!/2", 3, "/", 24, 2),
        info("2+22/2", 4, "+", 2, 11),
        info("(2+2)^2-2", 4, "-", 16, 2),
        info("2+2+22/2", 5, "+", 4, 11),
        info("(2+2)^2", 3, "^", 4, 2),
        info("2/2+(2+2)^2", 5, "+", 1, 16),
        info("22-2-2", 4, "-", 20, 2),
        info("22-2-2/2", 5, "-", 20, 1),
        info("22-2", 3, "-", 22, 2),
        info("22-2/2", 4, "-", 22, 1),
        info("22", 2, "", None, None),
        info("22+2/2", 4, "+", 22, 1),
        info("(2+2)!", 2, "!", 4, None),
        info("(2+2)!+2/2", 4, "+", 24, 1),
        info("2+(2+2)!", 3, "+", 2, 24),
        info("(2+2)!+2+2/2", 5, "+", 24, 3),
        info("(2+2)!+2+2", 4, "+", 24, 4),
        info("2+(2+2)!+2+2/2", 6, "+", 26, 3),
        info("22+2*(2+2)", 5, "+", 22, 8),
        info("(√√2^(2+2)!-2)/2", 5, "/", 62, 2),
        info("2*(2+2)^2", 4, "*", 2, 16),
        info("22+22/2", 5, "+", 22, 11),
        info("(2+2+2)^2-2", 5, "-", 36, 2),
        info("(2+2)!+22/2", 5, "+", 24, 11),
        info("(2+2+2)^2", 4, "^", 6, 2),
        info("222/(2+2+2)", 6, "/", 222, 6),
        info("2*(22-2)-2", 5, "-", 40, 2),
        info("2*(22-2)-2/2", 6, "-", 40, 1),
        info("2*(22-2)", 4, "*", 2, 20),
        info("2*22-2-2/2", 6, "-", 42, 1),
        info("2*22-2", 4, "-", 44, 2),
        info("2*22-2/2", 5, "-", 44, 1),
        info("2*22", 3, "*", 2, 22),
        info("2/2+2*22", 5, "+", 1, 44),
        info("2+2*22", 4, "+", 2, 44),
        info("2*(2+2)!-2/2", 5, "-", 48, 1),
        info("2*(2+2)!", 3, "*", 2, 24),
        info("2/2+2*(2+2)!", 5, "+", 1, 48),
        info("2+2*(2+2)!", 4, "+", 2, 48),
        info("2*(2+2)!+2+2/2", 6, "+", 48, 3),
        info("2*(2+(2+2)!)", 4, "*", 2, 26),
        info("2/2+2*(2+(2+2)!)", 6, "+", 1, 52),
        info("2+2*(2+(2+2)!)", 5, "+", 2, 52),
        info("2*22+22/2", 6, "+", 44, 11),
        info("2*((2+2)!+2+2)", 5, "*", 2, 28),
        info("2*22+2+22/2", 7, "+", 44, 13),
        info("22+(2+2+2)^2", 6, "+", 22, 36),
        info("2*(2+2)!+22/2", 6, "+", 48, 11),
        info("(2+2+2/2)!/2", 5, "/", 120, 2),
        info("(2+(2+2+2/2)!)/2", 6, "/", 122, 2),
        info("√√2^(2+2)!-2", 4, "-", 64, 2),
        info("√√2^(2+2)!-2/2", 5, "-", 64, 1),
        info("√√2^(2+2)!", 3, "^", (2, 2), 24),
        info("2/2+√√2^(2+2)!", 5, "+", 1, 64),
        info("2+√√2^(2+2)!", 4, "+", 2, 64),
        info("2+2/2+√√2^(2+2)!", 6, "+", 3, 64),
        info("(2+2)!+2*22", 5, "+", 24, 44),
        info("2*(2+2)!+22-2/2", 7, "+", 48, 21),
        info("22+2*(2+2)!", 5, "+", 22, 48),
        info("(((2+2)!/2)^2-2)/2", 6, "/", 142, 2),
        info("2*(2+2+2)^2", 5, "*", 2, 36),
        info("(2+((2+2)!/2)^2)/2", 6, "/", 146, 2),
        info("222/(2+2/2)", 6, "/", 222, 3),
        info("22/2+√√2^(2+2)!", 6, "+", 11, 64),
        info("2*(2*(22-2)-2)", 6, "*", 2, 38),
        info("2*2*22-22/2", 7, "-", 88, 11),
        info("2*2*(22-2)-2", 6, "-", 80, 2),
        info("(22/2-2)^2-2", 6, "-", 81, 2),
        info("2*2*(22-2)", 5, "*", 2, 40),
        info("(22/2-2)^2", 5, "^", 9, 2),
        info("2*(2*22-2)-2", 6, "-", 84, 2),
        info("2+(22/2-2)^2", 6, "+", 2, 81),
        info("2*(2*22-2)", 5, "*", 2, 42),
        info("2*2*22-2-2/2", 7, "-", 86, 1),
        info("2*2*22-2", 5, "-", 88, 2),
        info("2*2*22-2/2", 6, "-", 88, 1),
        info("2*2*22", 4, "*", 2, 44),
        info("222/2-22", 6, "-", 111, 22),
        info("2+2*2*22", 5, "+", 2, 88),
        info("2+222/2-22", 7, "-", 113, 22),
        info("2*(2+2*22)", 5, "*", 2, 46),
        info("2/2+2*(2+2*22)", 7, "+", 1, 92),
        info("2*2*(2+2)!-2", 5, "-", 96, 2),
        info("2*2*(2+2)!-2/2", 6, "-", 96, 1),
        info("2*2*(2+2)!", 4, "*", 2, 48),
        info("2/2+2*2*(2+2)!", 6, "+", 1, 96),
        info("2+2*2*(2+2)!", 5, "+", 2, 96),
        info("(22/2)^2-22", 6, "-", 121, 22),
        info("((22-2)/2)^2", 5, "^", 10, 2)],
        
        [info("3-3", 2, "-", 3, 3),
        info("3/3", 2, "/", 3, 3),
        info("3!/3", 2, "/", 6, 3),
        info("3", 1, "", None, None),
        info("3+3/3", 3, "+", 3, 1),
        info("3!-3/3", 3, "-", 6, 1),
        info("3!", 1, "!", 3, None),
        info("3!+3/3", 3, "+", 6, 1),
        info("3!+3!/3", 3, "+", 6, 2),
        info("3*3", 2, "*", 3, 3),
        info("3*3+3/3", 4, "+", 9, 1),
        info("33/3", 3, "/", 33, 3),
        info("3!+3!", 2, "+", 6, 6),
        info("3!+3!+3/3", 4, "+", 12, 1),
        info("3+33/3", 4, "+", 3, 11),
        info("3!+3*3", 3, "+", 6, 9),
        info("3!*3-3!/3", 4, "-", 18, 2),
        info("3!+33/3", 4, "+", 6, 11),
        info("3!*3", 2, "*", 6, 3),
        info("3!*3+3/3", 4, "+", 18, 1),
        info("3!!/3!/3!", 3, "/", 120, 6),
        info("3+3!*3", 3, "+", 3, 18),
        info("(3!+3!!)/33", 4, "/", 726, 33),
        info("3+3!!/3!/3!", 4, "+", 3, 20),
        info("3^3-3", 3, "-", 27, 3),
        info("3^3-3!/3", 4, "-", 27, 2),
        info("3^3-3/3", 4, "-", 27, 1),
        info("3^3", 2, "^", 3, 3),
        info("3^3+3/3", 4, "+", 27, 1),
        info("3^3+3!/3", 4, "+", 27, 2),
        info("33-3", 3, "-", 33, 3),
        info("33-3!/3", 4, "-", 33, 2),
        info("33-3/3", 4, "-", 33, 1),
        info("33", 2, "", None, None),
        info("33+3/3", 4, "+", 33, 1),
        info("33+3!/3", 4, "+", 33, 2),
        info("3!*3!", 2, "*", 6, 6),
        info("3!*3!+3/3", 4, "+", 36, 1),
        info("3!*3!+3!/3", 4, "+", 36, 2),
        info("3!+33", 3, "+", 6, 33),
        info("3!!/3!/3", 3, "/", 120, 3),
        info("(3+3!!/3!)/3", 4, "/", 123, 3),
        info("3!+3!*3!", 3, "+", 6, 36),
        info("3+3!!/3!/3", 4, "+", 3, 40),
        info("33+33/3", 5, "+", 33, 11),
        info("3^3+3!*3", 4, "+", 27, 18),
        info("3!+3!!/3!/3", 4, "+", 6, 40),
        info("3!*3!+33/3", 5, "+", 36, 11),
        info("3!*3*3-3!", 4, "-", 54, 6),
        info("3*3+3!!/3!/3", 5, "+", 9, 40),
        info("(3!+3!/3)!/3!!-3!", 5, "-", 56, 6),
        info("33+3!*3", 4, "+", 33, 18),
        info("3!*3*3-3!/3", 5, "-", 54, 2),
        info("3!*3*3-3/3", 5, "-", 54, 1),
        info("3!*3*3", 3, "*", 6, 9),
        info("3/3+3!*3*3", 5, "+", 1, 54),
        info("(3!+3!/3)!/3!!", 4, "/", 40320, 720),
        info("3+3!*3*3", 4, "+", 3, 54),
        info("(3!/3)^3!-3!", 4, "-", 64, 6),
        info("3!!/(3!+3!)-3/3", 5, "-", 60, 1),
        info("3!!/(3!+3!)", 3, "/", 720, 12),
        info("(3!/3)^3!-3", 4, "-", 64, 3),
        info("3!!/3/3-3!*3", 5, "-", 80, 18),
        info("3!*3!+3^3", 4, "+", 36, 27),
        info("(3!/3)^3!", 3, "^", 2, 6),
        info("(3!*33-3)/3", 5, "/", 195, 3),
        info("√(3!*(3!+3!!))", 3, "√", 4356, None),
        info("3+(3!/3)^3!", 4, "+", 3, 64),
        info("(3!^3-3)/3-3", 5, "-", 71, 3),
        info("3!^3/3-3", 4, "-", 72, 3),
        info("(3!^3-3!)/3", 4, "/", 210, 3),
        info("(3!^3-3)/3", 4, "/", 213, 3),
        info("3!^3/3", 3, "/", 216, 3),
        info("(3+3!^3)/3", 4, "/", 219, 3),
        info("3!!/3/3-3!", 4, "-", 80, 6),
        info("3*3^3-3!", 4, "-", 81, 6),
        info("3+(3+3!^3)/3", 5, "+", 3, 73),
        info("3!!/3/3-3", 4, "-", 80, 3),
        info("3*3^3-3", 4, "-", 81, 3),
        info("(3!!/3-3)/3", 4, "/", 237, 3),
        info("3!!/3/3", 3, "/", 240, 3),
        info("3*3^3", 3, "*", 3, 27),
        info("(3!+3!!/3)/3", 4, "/", 246, 3),
        info("3+3!!/3/3", 4, "+", 3, 80),
        info("3+3*3^3", 4, "+", 3, 81),
        info("3!+(3!!/3-3)/3", 5, "+", 6, 79),
        info("3!+3!!/3/3", 4, "+", 6, 80),
        info("3!+3*3^3", 4, "+", 6, 81),
        info("(3!+3!!)/3!-33", 5, "-", 121, 33),
        info("3*3+3!!/3/3", 5, "+", 9, 80),
        info("3*(33-3)", 4, "*", 3, 30),
        info("(3!!/3+33)/3", 5, "/", 273, 3),
        info("3!+3!+3!!/3/3", 5, "+", 12, 80),
        info("3*33-3!", 4, "-", 99, 6),
        info("(3!+3!!)/3!-3^3", 5, "-", 121, 27),
        info("3!^3-(3!+3!!)/3!", 5, "-", 216, 121),
        info("3*33-3", 4, "-", 99, 3),
        info("3*33-3!/3", 5, "-", 99, 2),
        info("3*33-3/3", 5, "-", 99, 1),
        info("3*33", 3, "*", 3, 33),
        info("(3!!-3!!/3!)/3!", 4, "/", 600, 6)],
        
        [info("4-4", 2, "-", 4, 4),
        info("4/4", 2, "/", 4, 4),
        info("√4", 1, "√", 4, None),
        info("4-4/4", 3, "-", 4, 1),
        info("4", 1, "", None, None),
        info("4+4/4", 3, "+", 4, 1),
        info("4+√4", 2, "+", 4, 2),
        info("(4+4!)/4", 3, "/", 28, 4),
        info("4+4", 2, "+", 4, 4),
        info("4+4+4/4", 4, "+", 8, 1),
        info("4+4+√4", 3, "+", 4, 6),
        info("44/4", 3, "/", 44, 4),
        info("4!/√4", 2, "/", 24, 2),
        info("(√4+4!)/√4", 3, "/", 26, 2),
        info("4*4-√4", 3, "-", 16, 2),
        info("4+44/4", 4, "+", 4, 11),
        info("4*4", 2, "*", 4, 4),
        info("4*4+4/4", 4, "+", 16, 1),
        info("√4+4*4", 3, "+", 2, 16),
        info("4!-4-4/4", 4, "-", 20, 1),
        info("4!-4", 2, "-", 24, 4),
        info("4!-4+4/4", 4, "+", 20, 1),
        info("4!-√4", 2, "-", 24, 2),
        info("4!-4/4", 3, "-", 24, 1),
        info("4!", 1, "!", 4, None),
        info("4!+4/4", 3, "+", 24, 1),
        info("√4+4!", 2, "+", 2, 24),
        info("4+4!-4/4", 4, "-", 28, 1),
        info("4+4!", 2, "+", 4, 24),
        info("4+4!+4/4", 4, "+", 28, 1),
        info("4+√4+4!", 3, "+", 4, 26),
        info("4!+(4+4!)/4", 4, "+", 24, 7),
        info("4+4+4!", 3, "+", 4, 28),
        info("(√4+√√√4^4!)/√4", 4, "/", 66, 2),
        info("4+4!+4+√4", 4, "+", 28, 6),
        info("4!+44/4", 4, "+", 24, 11),
        info("4!+4!/√4", 3, "+", 24, 12),
        info("4!+(√4+4!)/√4", 4, "+", 24, 13),
        info("44-√4-4", 4, "-", 42, 4),
        info("44-4-4/4", 5, "-", 40, 1),
        info("44-4", 3, "-", 44, 4),
        info("√((4!+(4+4)!)/4!)", 4, "√", 1681, None),
        info("44-√4", 3, "-", 44, 2),
        info("44-4/4", 4, "-", 44, 1),
        info("44", 2, "", None, None),
        info("44+4/4", 4, "+", 44, 1),
        info("√4+44", 3, "+", 2, 44),
        info("4!+4!-4/4", 4, "-", 48, 1),
        info("4!+4!", 2, "+", 24, 24),
        info("4!+4!+4/4", 4, "+", 48, 1),
        info("√4+4!+4!", 3, "+", 2, 48),
        info("4!+4!+4-4/4", 5, "+", 48, 3),
        info("4+4!+4!", 3, "+", 4, 48),
        info("(4^4-44)/4", 5, "/", 212, 4),
        info("4!+4!+4+√4", 4, "+", 48, 6),
        info("44+44/4", 5, "+", 44, 11),
        info("√4*(4+4!)", 3, "*", 2, 28),
        info("(4^4-4!-4)/4", 5, "/", 228, 4),
        info("(4^4-4!)/4", 4, "/", 232, 4),
        info("4!+4!+44/4", 5, "+", 48, 11),
        info("√√√4^4!-4", 3, "-", 64, 4),
        info("(4+4^4)/4-4", 5, "-", 65, 4),
        info("√√√4^4!-√4", 3, "-", 64, 2),
        info("(4^4-4)/4", 4, "/", 252, 4),
        info("√√√4^4!", 2, "^", (2, 2), 24),
        info("(4+4^4)/4", 4, "/", 260, 4),
        info("√4+√√√4^4!", 3, "+", 2, 64),
        info("44+4!-4/4", 5, "+", 44, 23),
        info("4!+44", 3, "+", 24, 44),
        info("44+4!+4/4", 5, "+", 44, 25),
        info("44+√4+4!", 4, "+", 44, 26),
        info("4*4!-4!-4/4", 5, "-", 72, 1),
        info("4*4!-4!", 3, "-", 96, 24),
        info("4/4+4*4!-4!", 5, "+", 1, 72),
        info("√4+4*4!-4!", 4, "+", 2, 72),
        info("(44+4^4)/4", 5, "/", 300, 4),
        info("4+4*4!-4!", 4, "+", 4, 72),
        info("(4-4/4)^4-4", 5, "-", 81, 4),
        info("4*(4!-4)-√4", 4, "-", 80, 2),
        info("4*(4!-4)-4/4", 5, "-", 80, 1),
        info("4*(4!-4)", 3, "*", 4, 20),
        info("(4-4/4)^4", 4, "^", 3, 4),
        info("√4+4*(4!-4)", 4, "+", 2, 80),
        info("√4+(4-4/4)^4", 5, "+", 2, 81),
        info("√4*44-4", 4, "-", 88, 4),
        info("4*4!-44/4", 5, "-", 96, 11),
        info("√4*44-√4", 4, "-", 88, 2),
        info("444/4-4!", 5, "-", 111, 24),
        info("√4*44", 3, "*", 2, 44),
        info("4/4+√4*44", 5, "+", 1, 88),
        info("√4+√4*44", 4, "+", 2, 88),
        info("4*4!-4-4/4", 5, "-", 92, 1),
        info("4*4!-4", 3, "-", 96, 4),
        info("4/4+4*4!-4", 5, "+", 1, 92),
        info("4*4!-√4", 3, "-", 96, 2),
        info("4*4!-4/4", 4, "-", 96, 1),
        info("4*4!", 2, "*", 4, 24),
        info("4*4!+4/4", 4, "+", 96, 1),
        info("√4+4*4!", 3, "+", 2, 96),
        info("4*4!+4-4/4", 5, "+", 96, 3),
        info("4+4*4!", 3, "+", 4, 96)],
        
        [info("5-5", 2, "-", 5, 5),
        info("5/5", 2, "/", 5, 5),
        info("(5+5)/5", 3, "/", 10, 5),
        info("(5+5+5)/5", 4, "/", 15, 5),
        info("5-5/5", 3, "-", 5, 1),
        info("5", 1, "", None, None),
        info("5+5/5", 3, "+", 5, 1),
        info("5+(5+5)/5", 4, "+", 5, 2),
        info("5!/(5+5+5)", 4, "/", 120, 15),
        info("5+5-5/5", 4, "-", 10, 1),
        info("5+5", 2, "+", 5, 5),
        info("55/5", 3, "/", 55, 5),
        info("5!/(5+5)", 3, "/", 120, 10),
        info("(5!-55)/5", 4, "/", 65, 5),
        info("5!/5-5-5", 4, "-", 19, 5),
        info("5+5+5", 3, "+", 5, 10),
        info("5+55/5", 4, "+", 5, 11),
        info("5+5!/(5+5)", 4, "+", 5, 12),
        info("(5!-5)/5-5", 4, "-", 23, 5),
        info("5!/5-5", 3, "-", 24, 5),
        info("5*5-5", 3, "-", 25, 5),
        info("5+5+55/5", 5, "+", 10, 11),
        info("(5!-5-5)/5", 4, "/", 110, 5),
        info("(5!-5)/5", 3, "/", 115, 5),
        info("5!/5", 2, "/", 120, 5),
        info("5*5", 2, "*", 5, 5),
        info("5*5+5/5", 4, "+", 25, 1),
        info("5*5+(5+5)/5", 5, "+", 25, 2),
        info("5+(5!-5)/5", 4, "+", 5, 23),
        info("5+5!/5", 3, "+", 5, 24),
        info("5+5*5", 3, "+", 5, 25),
        info("55-5!/5", 4, "-", 55, 24),
        info("((5+5)/5)^5", 4, "^", 2, 5),
        info("5+5+(5!-5)/5", 5, "+", 10, 23),
        info("5!/5+5+5", 4, "+", 24, 10),
        info("5*5+5+5", 4, "+", 25, 10),
        info("5*5+55/5", 5, "+", 25, 11),
        info("5*5+5!/(5+5)", 5, "+", 25, 12),
        info("(5!+5!)/5-5-5", 5, "-", 43, 5),
        info("5!/5+5+5+5", 5, "+", 24, 15),
        info("55-5-5-5", 5, "-", 45, 5),
        info("5!-55-5!/5", 5, "-", 65, 24),
        info("(5!+5!-5)/5-5", 5, "-", 47, 5),
        info("(5!+5!)/5-5", 4, "-", 48, 5),
        info("55-55/5", 5, "-", 55, 11),
        info("55-5-5", 4, "-", 50, 5),
        info("(5!-5+5!-5)/5", 5, "/", 230, 5),
        info("(5!+5!-5)/5", 4, "/", 235, 5),
        info("(5!+5!)/5", 3, "/", 240, 5),
        info("5!/5+5*5", 4, "+", 24, 25),
        info("55-5", 3, "-", 55, 5),
        info("5/5+55-5", 5, "+", 1, 50),
        info("5+(5!+5!-5)/5", 5, "+", 5, 47),
        info("5+(5!+5!)/5", 4, "+", 5, 48),
        info("55-5/5", 4, "-", 55, 1),
        info("55", 2, "", None, None),
        info("55+5/5", 4, "+", 55, 1),
        info("55+(5+5)/5", 5, "+", 55, 2),
        info("5+5+(5!+5!)/5", 5, "+", 10, 48),
        info("55+5-5/5", 5, "+", 55, 4),
        info("5+55", 3, "+", 5, 55),
        info("55+5+5/5", 5, "+", 55, 6),
        info("5+55+(5+5)/5", 6, "+", 60, 2),
        info("5!-55-(5+5)/5", 6, "-", 65, 2),
        info("5!-5/5-55", 5, "-", 119, 55),
        info("5!-55", 3, "-", 120, 55),
        info("55+55/5", 5, "+", 55, 11),
        info("55+5!/(5+5)", 5, "+", 55, 12),
        info("55+(5!-55)/5", 6, "+", 55, 13),
        info("5!-55+5-5/5", 6, "+", 65, 4),
        info("5+5!-55", 4, "-", 125, 55),
        info("5!-5*5-5!/5", 5, "-", 95, 24),
        info("(5!+5!+5!)/5", 4, "/", 360, 5),
        info("5*5+(5!+5!)/5", 5, "+", 25, 48),
        info("5!/5+55-5", 5, "+", 24, 50),
        info("5*(5+5+5)", 4, "*", 5, 15),
        info("5!-55+55/5", 6, "+", 65, 11),
        info("5+5!-(5!+5!)/5", 5, "-", 125, 48),
        info("55+(5!-5)/5", 5, "+", 55, 23),
        info("5!/5+55", 4, "+", 24, 55),
        info("5*5+55", 4, "+", 25, 55),
        info("5*5+55+5/5", 6, "+", 25, 56),
        info("(555-5!)/5-5", 6, "-", 87, 5),
        info("5+55+(5!-5)/5", 6, "+", 60, 23),
        info("5!/5+5+55", 5, "+", 24, 60),
        info("5*5+5+55", 5, "+", 25, 60),
        info("5!-5-5-5!/5", 5, "-", 110, 24),
        info("(555-5!)/5", 5, "/", 435, 5),
        info("5!-((5+5)/5)^5", 5, "-", 120, 32),
        info("5!/5+5!-55", 5, "+", 24, 65),
        info("5!-5-5*5", 4, "-", 115, 25),
        info("5!-5-5!/5", 4, "-", 115, 24),
        info("5!-5-(5!-5)/5", 5, "-", 115, 23),
        info("5!-5*5-(5+5)/5", 6, "-", 95, 2),
        info("5!-5/5-5*5", 5, "-", 119, 25),
        info("5!-5*5", 3, "-", 120, 25),
        info("5!-5!/5", 3, "-", 120, 24),
        info("5!-(5!-5)/5", 4, "-", 120, 23),
        info("5!-(5!-5-5)/5", 5, "-", 120, 22),
        info("5!-5-5-55/5", 6, "-", 110, 11),
        info("5+5!-5*5", 4, "-", 125, 25)],
        
        [info("6-6", 2, "-", 6, 6),
        info("6/6", 2, "/", 6, 6),
        info("(6+6)/6", 3, "/", 12, 6),
        info("(6+6+6)/6", 4, "/", 18, 6),
        info("6-(6+6)/6", 4, "-", 6, 2),
        info("6-6/6", 3, "-", 6, 1),
        info("6", 1, "", None, None),
        info("6+6/6", 3, "+", 6, 1),
        info("6+(6+6)/6", 4, "+", 6, 2),
        info("(66-6-6)/6", 5, "/", 54, 6),
        info("(66-6)/6", 4, "/", 60, 6),
        info("66/6", 3, "/", 66, 6),
        info("6+6", 2, "+", 6, 6),
        info("6+6+6/6", 4, "+", 12, 1),
        info("6!/6/6-6", 4, "-", 20, 6),
        info("6!/(6+6+6*6)", 5, "/", 720, 48),
        info("6*6-6!/6/6", 5, "-", 36, 20),
        info("6+66/6", 4, "+", 6, 11),
        info("6+6+6", 3, "+", 6, 12),
        info("(6!/6-6)/6", 4, "/", 114, 6),
        info("6!/6/6", 3, "/", 120, 6),
        info("(6+6!/6)/6", 4, "/", 126, 6),
        info("(66+66)/6", 5, "/", 132, 6),
        info("6+6+66/6", 5, "+", 12, 11),
        info("6+6+6+6", 4, "+", 12, 12),
        info("6*6-66/6", 5, "-", 36, 11),
        info("6+6!/6/6", 4, "+", 6, 20),
        info("6+(6+6!/6)/6", 5, "+", 6, 21),
        info("√(6!+((6+6)/6)^6)", 5, "√", 784, None),
        info("√(6!+(6+6!)/6)", 4, "√", 841, None),
        info("6*6-6", 3, "-", 36, 6),
        info("6/6+6*6-6", 5, "+", 1, 30),
        info("6+6+6!/6/6", 5, "+", 12, 20),
        info("6*66/(6+6)", 5, "/", 396, 12),
        info("6*6-(6+6)/6", 5, "-", 36, 2),
        info("6*6-6/6", 4, "-", 36, 1),
        info("6*6", 2, "*", 6, 6),
        info("6/6+6*6", 4, "+", 1, 36),
        info("6*6+(6+6)/6", 5, "+", 36, 2),
        info("((6!+6!)/6-6)/6", 5, "/", 234, 6),
        info("6!/(6+6+6)", 4, "/", 720, 18),
        info("6+6*6-6/6", 5, "-", 42, 1),
        info("6+6*6", 3, "+", 6, 36),
        info("6/6+6+6*6", 5, "+", 1, 42),
        info("6+6*6+(6+6)/6", 6, "+", 42, 2),
        info("666/6-66", 6, "-", 111, 66),
        info("66-6!/6/6", 5, "-", 66, 20),
        info("6*6+66/6", 5, "+", 36, 11),
        info("6+6+6*6", 4, "+", 12, 36),
        info("66-6-66/6", 6, "-", 60, 11),
        info("(6!-6!/6)/(6+6)", 5, "/", 600, 12),
        info("(6!-6*6)/(6+6)-6", 6, "-", 57, 6),
        info("6+66-6!/6/6", 6, "-", 72, 20),
        info("(6!-6)/6-66", 5, "-", 119, 66),
        info("66-6-6", 4, "-", 60, 6),
        info("66-66/6", 5, "-", 66, 11),
        info("6*6+6!/6/6", 5, "+", 36, 20),
        info("(6!-6*6)/(6+6)", 5, "/", 684, 12),
        info("((6+6)/6)^6-6", 5, "-", 64, 6),
        info("66-6-6/6", 5, "-", 60, 1),
        info("66-6", 3, "-", 66, 6),
        info("6/6+66-6", 5, "+", 1, 60),
        info("6+6*6+6!/6/6", 6, "+", 42, 20),
        info("(6!+6*6)/(6+6)", 5, "/", 756, 12),
        info("((6+6)/6)^6", 4, "^", 2, 6),
        info("66-6/6", 4, "-", 66, 1),
        info("66", 2, "", None, None),
        info("6/6+66", 4, "+", 1, 66),
        info("66+(6+6)/6", 5, "+", 66, 2),
        info("66+(6+6+6)/6", 6, "+", 66, 3),
        info("6+((6+6)/6)^6", 5, "+", 6, 64),
        info("6+66-6/6", 5, "-", 72, 1),
        info("6+66", 3, "+", 6, 66),
        info("6/6+6+66", 5, "+", 1, 72),
        info("6+66+(6+6)/6", 6, "+", 72, 2),
        info("666/6-6*6", 6, "-", 111, 36),
        info("66+(66-6)/6", 6, "+", 66, 10),
        info("66+66/6", 5, "+", 66, 11),
        info("6+6+66", 4, "+", 12, 66),
        info("6+66+6+6/6", 6, "+", 72, 7),
        info("(6!+6!)/(6+6+6)", 5, "/", 1440, 18),
        info("(6+6!-(6!+6!)/6)/6", 6, "/", 486, 6),
        info("(6!-6-6)/6-6*6", 6, "-", 118, 36),
        info("(6!-6)/6-6*6", 5, "-", 119, 36),
        info("6!/6-6*6", 4, "-", 120, 36),
        info("(6+6!)/6-6*6", 5, "-", 121, 36),
        info("66+6!/6/6", 5, "+", 66, 20),
        info("66+(6+6!/6)/6", 6, "+", 66, 21),
        info("(6!-6!/6)/6-6-6", 6, "-", 94, 6),
        info("√((6+6!*66)/6)", 5, "√", 7921, None),
        info("6+6!/6-6*6", 5, "-", 126, 36),
        info("(666-6!/6)/6", 6, "/", 546, 6),
        info("6+66+6!/6/6", 6, "+", 72, 20),
        info("(6!-6-6!/6)/6-6", 6, "-", 99, 6),
        info("(6!-6!/6)/6-6", 5, "-", 100, 6),
        info("√(6^6)-(6+6!)/6", 5, "-", 216, 121),
        info("√(6^6)-6!/6", 4, "-", 216, 120),
        info("√(6^6)-(6!-6)/6", 5, "-", 216, 119),
        info("(6!-66-66)/6", 6, "/", 588, 6),
        info("(6!-6-6!/6)/6", 5, "/", 594, 6),
        info("(6!-6!/6)/6", 4, "/", 600, 6)],
        
        [info("7-7", 2, "-", 7, 7),
        info("7/7", 2, "/", 7, 7),
        info("(7+7)/7", 3, "/", 14, 7),
        info("(7+7+7)/7", 4, "/", 21, 7),
        info("77/7-7", 4, "-", 11, 7),
        info("7-(7+7)/7", 4, "-", 7, 2),
        info("7-7/7", 3, "-", 7, 1),
        info("7", 1, "", None, None),
        info("7+7/7", 3, "+", 7, 1),
        info("7+(7+7)/7", 4, "+", 7, 2),
        info("(77-7)/7", 4, "/", 70, 7),
        info("77/7", 3, "/", 77, 7),
        info("(7+77)/7", 4, "/", 84, 7),
        info("7+7-7/7", 4, "-", 14, 1),
        info("7+7", 2, "+", 7, 7),
        info("7+7+7/7", 4, "+", 14, 1),
        info("7+7+(7+7)/7", 5, "+", 14, 2),
        info("7+(77-7)/7", 5, "+", 7, 10),
        info("7+77/7", 4, "+", 7, 11),
        info("7+(7+77)/7", 5, "+", 7, 12),
        info("7+7+7-7/7", 5, "+", 14, 6),
        info("7+7+7", 3, "+", 7, 14),
        info("7+7+7+7/7", 5, "+", 14, 8),
        info("(77+7+77)/7", 6, "/", 161, 7),
        info("(77/7-7)!", 4, "!", 4, None),
        info("7+7+77/7", 5, "+", 14, 11),
        info("7+7+(7+77)/7", 6, "+", 14, 12),
        info("√(7+(7+7+7!)/7)", 5, "√", 729, None),
        info("77-7*7", 4, "-", 77, 49),
        info("77+7/7-7*7", 6, "-", 78, 49),
        info("7!/(77/7-7)!/7", 6, "/", 210, 7),
        info("7+(77/7-7)!", 5, "+", 7, 24),
        info("7+7+7+77/7", 6, "+", 21, 11),
        info("7!/(7*7+77)-7", 6, "-", 40, 7),
        info("777/7-77", 6, "-", 111, 77),
        info("7*7-7-7", 4, "-", 42, 7),
        info("7/7+7*7-7-7", 6, "+", 1, 35),
        info("777/(7+7+7)", 6, "/", 777, 21),
        info("7*7-77/7", 5, "-", 49, 11),
        info("7*7-(77-7)/7", 6, "-", 49, 10),
        info("7!/(7*7+77)", 5, "/", 5040, 126),
        info("7*7-7-7/7", 5, "-", 42, 1),
        info("7*7-7", 3, "-", 49, 7),
        info("7/7+7*7-7", 5, "+", 1, 42),
        info("7*7-7+(7+7)/7", 6, "+", 42, 2),
        info("7+7*7-77/7", 6, "-", 56, 11),
        info("7*7-(7+7+7)/7", 6, "-", 49, 3),
        info("7*7-(7+7)/7", 5, "-", 49, 2),
        info("7*7-7/7", 4, "-", 49, 1),
        info("7*7", 2, "*", 7, 7),
        info("7*7+7/7", 4, "+", 49, 1),
        info("7*7+(7+7)/7", 5, "+", 49, 2),
        info("7*7+(7+7+7)/7", 6, "+", 49, 3),
        info("7!/(7+77)-7", 5, "-", 60, 7),
        info("7+7*7-(7+7)/7", 6, "-", 56, 2),
        info("7*7+7-7/7", 5, "+", 49, 6),
        info("7+7*7", 3, "+", 7, 49),
        info("7*7+7+7/7", 5, "+", 49, 8),
        info("7+7*7+(7+7)/7", 6, "+", 56, 2),
        info("77-7-77/7", 6, "-", 70, 11),
        info("7!/(7+77)", 4, "/", 5040, 84),
        info("7*7+(7+77)/7", 6, "+", 49, 12),
        info("777/7-7*7", 6, "-", 111, 49),
        info("77-7-7", 4, "-", 70, 7),
        info("√(7!+7/7)-7", 4, "-", 71, 7),
        info("7!/(77-7)-7", 5, "-", 72, 7),
        info("77-77/7", 5, "-", 77, 11),
        info("7+7!/(7+77)", 5, "+", 7, 60),
        info("77-7-(7+7)/7", 6, "-", 70, 2),
        info("77-7-7/7", 5, "-", 70, 1),
        info("77-7", 3, "-", 77, 7),
        info("√(7!+7/7)", 3, "√", 5041, None),
        info("7!/(77-7)", 4, "/", 5040, 70),
        info("7+77-77/7", 6, "-", 84, 11),
        info("77-(7+7+7)/7", 6, "-", 77, 3),
        info("77-(7+7)/7", 5, "-", 77, 2),
        info("77-7/7", 4, "-", 77, 1),
        info("77", 2, "", None, None),
        info("77+7/7", 4, "+", 77, 1),
        info("77+(7+7)/7", 5, "+", 77, 2),
        info("7!/(77-7-7)", 5, "/", 5040, 63),
        info("77-7+77/7", 6, "+", 70, 11),
        info("7+77-(7+7)/7", 6, "-", 84, 2),
        info("77+7-7/7", 5, "+", 77, 6),
        info("7+77", 3, "+", 7, 77),
        info("77+7+7/7", 5, "+", 77, 8),
        info("7+77+(7+7)/7", 6, "+", 84, 2),
        info("77+(77-7)/7", 6, "+", 77, 10),
        info("77+77/7", 5, "+", 77, 11),
        info("77+(7+77)/7", 6, "+", 77, 12),
        info("7!/(7+7*7)", 4, "/", 5040, 56),
        info("7+7+77", 4, "+", 14, 77),
        info("7+77+7+7/7", 6, "+", 84, 8),
        info("(777-77)/7-7", 7, "-", 100, 7),
        info("7777/77-7", 7, "-", 101, 7),
        info("7+77+77/7", 6, "+", 84, 11),
        info("(7+7!)/7/7-7", 5, "-", 103, 7),
        info("7*(7+7)-7/7", 5, "-", 98, 1),
        info("7*(7+7)", 3, "*", 7, 14),
        info("7/7+7*(7+7)", 5, "+", 1, 98),
        info("(777-77)/7", 6, "/", 700, 7)],
        
        [info("8-8", 2, "-", 8, 8),
        info("8/8", 2, "/", 8, 8),
        info("√√(8+8)", 2, "√", 4, None),
        info("√(8+8/8)", 3, "√", 9, None),
        info("√(8+8)", 2, "√", 16, None),
        info("√(8+8)+8/8", 4, "+", 4, 1),
        info("8-√√(8+8)", 3, "-", 8, 2),
        info("8-8/8", 3, "-", 8, 1),
        info("8", 1, "", None, None),
        info("8+8/8", 3, "+", 8, 1),
        info("8+√√(8+8)", 3, "+", 8, 2),
        info("88/8", 3, "/", 88, 8),
        info("8+√(8+8)", 3, "+", 8, 4),
        info("(88+8+8)/8", 5, "/", 104, 8),
        info("8+8-√√(8+8)", 4, "-", 16, 2),
        info("8+8-8/8", 4, "-", 16, 1),
        info("8+8", 2, "+", 8, 8),
        info("8+8+8/8", 4, "+", 16, 1),
        info("8+8+√√(8+8)", 4, "+", 16, 2),
        info("8+88/8", 4, "+", 8, 11),
        info("8+8+√(8+8)", 4, "+", 16, 4),
        info("√(8+8)!-√(8+8/8)", 5, "-", 24, 3),
        info("88/√(8+8)", 4, "/", 88, 4),
        info("√(8+8)!-8/8", 4, "-", 24, 1),
        info("√(8+8)!", 2, "!", 4, None),
        info("√(8+8)!+8/8", 4, "+", 24, 1),
        info("√(8+8)!+√√(8+8)", 4, "+", 24, 2),
        info("8+8+88/8", 5, "+", 16, 11),
        info("√(8+8)!+√(8+8)", 4, "+", 24, 4),
        info("888/√(8+8)!-8", 6, "-", 37, 8),
        info("8+88/√(8+8)", 5, "+", 8, 22),
        info("8*√(8+8)-8/8", 5, "-", 32, 1),
        info("8*√(8+8)", 3, "*", 8, 4),
        info("8/8+8*√(8+8)", 5, "+", 1, 32),
        info("√√(8+8)+8*√(8+8)", 5, "+", 2, 32),
        info("√(8+8)!+88/8", 5, "+", 24, 11),
        info("√√(8-√√(8+8))^8", 4, "^", (6, 2), 8),
        info("888/√(8+8)!", 5, "/", 888, 24),
        info("8+8+88/√(8+8)", 6, "+", 16, 22),
        info("8*√(8+8)+8-8/8", 6, "+", 32, 7),
        info("8+8*√(8+8)", 4, "+", 8, 32),
        info("√√(8-8/8)^8-8", 5, "-", 49, 8),
        info("8*8-88/√(8+8)", 6, "-", 64, 22),
        info("8*√(8+8)+88/8", 6, "+", 32, 11),
        info("88/√√(8+8)", 4, "/", 88, 2),
        info("8!/(8+888)", 5, "/", 40320, 896),
        info("8*8-8-8-√√(8+8)", 6, "-", 48, 2),
        info("√((8!+8)/8)-√(8+8)!", 5, "-", 71, 24),
        info("8*8-8-8", 4, "-", 56, 8),
        info("√√(8-8/8)^8", 4, "^", (7, 2), 8),
        info("√√(8+8)+8*8-8-8", 6, "+", 2, 48),
        info("√√(8+8)+√√(8-8/8)^8", 6, "+", 2, 49),
        info("8*8-8-√(8+8)", 5, "-", 56, 4),
        info("8*8-88/8", 5, "-", 64, 11),
        info("8*8-8-√√(8+8)", 5, "-", 56, 2),
        info("8*8-8-8/8", 5, "-", 56, 1),
        info("8*8-8", 3, "-", 64, 8),
        info("8/8+8*8-8", 5, "+", 1, 56),
        info("√√(8+8)+8*8-8", 5, "+", 2, 56),
        info("8*8-8+√(8+8/8)", 6, "+", 56, 3),
        info("8*8-√(8+8)", 4, "-", 64, 4),
        info("8*8-√(8+8/8)", 5, "-", 64, 3),
        info("8*8-√√(8+8)", 4, "-", 64, 2),
        info("8*8-8/8", 4, "-", 64, 1),
        info("8*8", 2, "*", 8, 8),
        info("8/8+8*8", 4, "+", 1, 64),
        info("√√(8+8)+8*8", 4, "+", 2, 64),
        info("8*8+√(8+8/8)", 5, "+", 64, 3),
        info("√(8+8)+8*8", 4, "+", 4, 64),
        info("√((8!+8)/8)-√√(8+8)", 5, "-", 71, 2),
        info("8!/√√(√(8+8)!)^8", 4, "/", 40320, 576),
        info("√((8!+8)/8)", 3, "√", 5041, None),
        info("8+8*8", 3, "+", 8, 64),
        info("8/8+8+8*8", 5, "+", 1, 72),
        info("√√(8+8)+8+8*8", 5, "+", 2, 72),
        info("8*8+88/8", 5, "+", 64, 11),
        info("88-8-√(8+8)", 5, "-", 80, 4),
        info("88-88/8", 5, "-", 88, 11),
        info("88-8-√√(8+8)", 5, "-", 80, 2),
        info("8+√((8!+8)/8)", 4, "+", 8, 71),
        info("88-8", 3, "-", 88, 8),
        info("√√(8+8/8)^8", 4, "^", (9, 2), 8),
        info("√√(8+8)+88-8", 5, "+", 2, 80),
        info("8+8*8+88/8", 6, "+", 72, 11),
        info("88-√(8+8)", 4, "-", 88, 4),
        info("88-√(8+8/8)", 5, "-", 88, 3),
        info("88-√√(8+8)", 4, "-", 88, 2),
        info("88-8/8", 4, "-", 88, 1),
        info("88", 2, "", None, None),
        info("88+8/8", 4, "+", 88, 1),
        info("88+√√(8+8)", 4, "+", 88, 2),
        info("88+√(8+8/8)", 5, "+", 88, 3),
        info("88+√(8+8)", 4, "+", 88, 4),
        info("8+88-√(8+8/8)", 6, "-", 96, 3),
        info("88+8-√√(8+8)", 5, "+", 88, 6),
        info("88+8-8/8", 5, "+", 88, 7),
        info("8+88", 3, "+", 8, 88),
        info("88+8+8/8", 5, "+", 88, 9),
        info("88+8+√√(8+8)", 5, "+", 88, 10),
        info("88+88/8", 5, "+", 88, 11),
        info("√√(8+√√(8+8))^8", 4, "^", (10, 2), 8)],
        
        [info("9-9", 2, "-", 9, 9),
        info("9/9", 2, "/", 9, 9),
        info("√9!/√9", 2, "/", 6, 3),
        info("√9", 1, "√", 9, None),
        info("√9+9/9", 3, "+", 3, 1),
        info("√9!-9/9", 3, "-", 6, 1),
        info("√9!", 1, "!", 3, None),
        info("√9!+9/9", 3, "+", 6, 1),
        info("9-9/9", 3, "-", 9, 1),
        info("9", 1, "", None, None),
        info("9+9/9", 3, "+", 9, 1),
        info("99/9", 3, "/", 99, 9),
        info("9+√9", 2, "+", 9, 3),
        info("9+√9+9/9", 4, "+", 12, 1),
        info("√9+99/9", 4, "+", 3, 11),
        info("9+√9!", 2, "+", 9, 6),
        info("9+√9!+9/9", 4, "+", 15, 1),
        info("9+9-9/9", 4, "-", 18, 1),
        info("9+9", 2, "+", 9, 9),
        info("9+9+9/9", 4, "+", 18, 1),
        info("√9!!/√9!/√9!", 3, "/", 120, 6),
        info("9+9+√9", 3, "+", 9, 12),
        info("√(√9!*(√9!+√9!!)/9)", 4, "√", 484, None),
        info("(√9!^√9-9)/9", 4, "/", 207, 9),
        info("9+9+√9!", 3, "+", 9, 15),
        info("9*√9-√9!/√9", 4, "-", 27, 2),
        info("9*√9-9/9", 4, "-", 27, 1),
        info("9*√9", 2, "*", 9, 3),
        info("9*√9+9/9", 4, "+", 27, 1),
        info("9*√9+√9!/√9", 4, "+", 27, 2),
        info("√9+9*√9", 3, "+", 3, 27),
        info("(99-√9!)/√9", 4, "/", 93, 3),
        info("(99-√9)/√9", 4, "/", 96, 3),
        info("99/√9", 3, "/", 99, 3),
        info("(√9+99)/√9", 4, "/", 102, 3),
        info("√9!*√9!-9/9", 4, "-", 36, 1),
        info("√9!*√9!", 2, "*", 6, 6),
        info("√9!*√9!+9/9", 4, "+", 36, 1),
        info("√9!*√9!+√9!/√9", 4, "+", 36, 2),
        info("√9+√9!*√9!", 3, "+", 3, 36),
        info("√9!!/(9+9)", 3, "/", 720, 18),
        info("(√9+√9!!/√9!)/√9", 4, "/", 123, 3),
        info("√9!+√9!*√9!", 3, "+", 6, 36),
        info("√9+√9!!/(9+9)", 4, "+", 3, 40),
        info("√9!!/9-√9!*√9!", 4, "-", 80, 36),
        info("9*√9!-9", 3, "-", 54, 9),
        info("√9!+√9!!/(9+9)", 4, "+", 6, 40),
        info("9!/√9!!/9-9", 4, "-", 56, 9),
        info("9*√9!-√9!", 3, "-", 54, 6),
        info("9+√9!!/(9+9)", 4, "+", 9, 40),
        info("9!/√9!!/9-√9!", 4, "-", 56, 6),
        info("9*√9!-√9", 3, "-", 54, 3),
        info("9*√9!-√9!/√9", 4, "-", 54, 2),
        info("9*√9!-9/9", 4, "-", 54, 1),
        info("9*√9!", 2, "*", 9, 6),
        info("9*√9!+9/9", 4, "+", 54, 1),
        info("9!/√9!!/9", 3, "/", 504, 9),
        info("√9+9*√9!", 3, "+", 3, 54),
        info("(√9!/√9)^√9!-√9!", 4, "-", 64, 6),
        info("√9+9!/√9!!/9", 4, "+", 3, 56),
        info("√9!+9*√9!", 3, "+", 6, 54),
        info("(√9!/√9)^√9!-√9", 4, "-", 64, 3),
        info("√9!!/9-9-9", 4, "-", 71, 9),
        info("9+9*√9!", 3, "+", 9, 54),
        info("(√9!/√9)^√9!", 3, "^", 2, 6),
        info("9+9!/√9!!/9", 4, "+", 9, 56),
        info("√(√9!*(√9!+√9!!))", 3, "√", 4356, None),
        info("√(9+9!/9/9)", 4, "√", 4489, None),
        info("√9!!/9-√9-9", 4, "-", 77, 9),
        info("9*9-√9-9", 4, "-", 78, 9),
        info("(√9!!-9)/9-9", 4, "-", 79, 9),
        info("√9!!/9-9", 3, "-", 80, 9),
        info("9*9-9", 3, "-", 81, 9),
        info("(√9!!-9)/9-√9!", 4, "-", 79, 6),
        info("√9!!/9-√9!", 3, "-", 80, 6),
        info("9*9-√9!", 3, "-", 81, 6),
        info("(√9!!-9)/9-√9", 4, "-", 79, 3),
        info("√9!!/9-√9", 3, "-", 80, 3),
        info("9*9-√9", 3, "-", 81, 3),
        info("(√9!!-9)/9", 3, "/", 711, 9),
        info("√9!!/9", 2, "/", 720, 9),
        info("9*9", 2, "*", 9, 9),
        info("9*9+9/9", 4, "+", 81, 1),
        info("√9+√9!!/9", 3, "+", 3, 80),
        info("√9+9*9", 3, "+", 3, 81),
        info("√9!+(√9!!-9)/9", 4, "+", 6, 79),
        info("√9!+√9!!/9", 3, "+", 6, 80),
        info("√9!+9*9", 3, "+", 6, 81),
        info("9+(√9!!-9)/9", 4, "+", 9, 79),
        info("9+√9!!/9", 3, "+", 9, 80),
        info("99-9", 3, "-", 99, 9),
        info("(√9!!+99)/9", 4, "/", 819, 9),
        info("√9!!/9+9+√9", 4, "+", 80, 12),
        info("99-√9!", 3, "-", 99, 6),
        info("9/9+99-√9!", 5, "+", 1, 93),
        info("√9!!/9+9+√9!", 4, "+", 80, 15),
        info("99-√9", 3, "-", 99, 3),
        info("99-√9!/√9", 4, "-", 99, 2),
        info("99-9/9", 4, "-", 99, 1),
        info("99", 2, "", None, None),
        info("99+9/9", 4, "+", 99, 1)]]

def expr_sqrt_replace(string):
    string = string.replace("v", "√")
    string = string.replace("sqrt", "√")
    return string

def expr_check(string, digit):
    if string == "":
        return (None, 0)
    view = 4
    string = expr_sqrt_replace(string)
    string = string.replace("[", "(")
    string = string.replace("]", ")")
    string = string.replace("{", "(")
    string = string.replace("}", ")")
    #string = string.replace("**", "^")
    string = string.replace(" ", "")
    string = string.replace("\n", "")
    string = string.replace("\t", "")
    
    for c in string:
        if c not in "0123456789()+-*/^√!":
            return (None, 1, c)
    
    bracket_count = 0
    for i in range(len(string)):
        if string[i] == "(":
            bracket_count += 1
        elif string[i] == ")":
            bracket_count -= 1
        if bracket_count < 0:
            return (None, 2,
                    string[max(0, i-view): i+view+1],
                    i-max(0, i-view))
    if bracket_count != 0:
        return (None, 3,
                string[max(0, len(string)-view) : len(string)],
                len(string)-max(0, len(string)-view))
    
    single_digit = True
    for i in range(len(string)):
        if string[i] in "0123456789" and int(string[i]) != digit:
            single_digit = False
            break
    
    string = "(" + string + ")"
    for i in range(1, len(string)):
        if (string[i-1] in "(+-*/^√") and (string[i] in ")*/^!"):
            return (None, 4,
                    string[max(0, i-view): i+view+1],
                    i-max(0, i-view))
    
    inplmin = -1
    i = 0
    while i < len(string):
        if inplmin >= 0:
            if string[i] in "+-":
                minuses += int(string[i] == "-")
            elif i - inplmin == 1 and not (unar and minuses == 0):
                inplmin = -1
            else:
                replsign = "-"
                if not (minuses % 2):
                    if unar:
                        replsign = ""
                    else:
                        replsign = "+"
                string = string[:inplmin] + replsign + string[i:]
                i = inplmin-1
                inplmin = -1
        else:
            if string[i] in "+-":
                inplmin = i
                minuses = int(string[i] == "-")
                unar = (prev in "(*/^√")
        prev = string[i]
        i += 1
    
    i = len(string)-2
    while i > 0:
        if string[i] == "-" and string[i-1] in "(*/^√":
            j = i+1
            while string[j] == "√":
                j += 1
            if string[j] == "(":
                bracket_count = 1
                j += 1
                while bracket_count:
                    if string[j] == "(":
                        bracket_count += 1
                    if string[j] == ")":
                        bracket_count -= 1
                    j += 1
            else:
                while string[j] in "0123456789":
                    j += 1
            string = string[:i] + "(0" + string[i:j] + ")" + string[j:]
        i -= 1
    
    i = 1
    while i < len(string):
        if (string[i-1] in ")!" and string[i] in "0123456789(√") or (string[i-1] in "0123456789" and string[i] in "(√"):
            string = string[:i] + "*" + string[i:]
        i += 1
    string = string[1:-1]
    length = string.count(str(digit))
    return (string, length, single_digit)

def evaluate_power(arg):
    global NAN
    global ONE
    global ZERO
    number, power = arg[0], arg[1]
    if isinstance(number, float) and isinstance(power, float):
        if (number == 0.0 and power <= 0.0) or number < 0.0:
            return NAN
        if number != 0.0:
            if abs(power * math.log(number)) > MAXEXPONENT:
                return NAN
        return number ** power
    if isinstance(power, float):
        if number == 0 and power <= 0.0:
            return NAN
        if number == 0:
            return ZERO
        if number == 1:
            return ONE
        if number < 0:
            return NAN
        if abs(power * math.log(number)) > MAXEXPONENT:
            return NAN
        return number ** power
    if isinstance(number, float):
        if number == 0.0 and power <= 0:
            return NAN
        if power == 0:
            return ONE
        if number < 0:
            if not (power.denominator % 2):
                return NAN
            number = abs(number)
            if abs(power * math.log(number)) > MAXEXPONENT:
                return NAN
            if (power.numerator % 2):
                return -(number ** power)
            return number ** power
        if number != 0.0:
            if abs(power * math.log(number)) > MAXEXPONENT:
                return NAN
        return number ** power
    if power == 1:
        return number
    if power == -1:
        if number == 0:
            return NAN
        else:
            return fr.Fraction(number.denominator, number.numerator)
    if number == 0:
        if power <= 0:
            return NAN
        return ZERO
    if power == 0:
        return ONE
    if power < 0:
        number, power = 1/number, -power
    negative = False
    if number < 0:
        if not (power.denominator % 2):
            return NAN
        if (power.numerator % 2):
            negative = True
        number = abs(number)
    if abs(power * math.log(number)) > MAXEXPONENT:
        return NAN
    approxnum = round(pow(number.numerator, 1/power.denominator))
    if approxnum ** power.denominator != number.numerator:
        if negative:
            return float(-(number ** power))
        return float(number ** power)
    approxden = round(pow(number.denominator, 1/power.denominator))
    if approxden ** power.denominator != number.denominator:
        if negative:
            return float(-(number ** power))
        return float(number ** power)
    if negative:
        return -fr.Fraction(approxnum ** power.numerator, approxden ** power.numerator)
    return fr.Fraction(approxnum ** power.numerator, approxden ** power.numerator)

def expr_calc(string):
    global NAN
    global ONE
    global ZERO
    
    args = []
    ops = []
    pos = 0
    while pos < len(string):
        if pos:
            ops.append(string[pos])
            pos += 1
        else:
            ops.append(None)
        sqrts = 0
        while string[pos] == "√":
            pos += 1
            sqrts += 1
        
        if string[pos] == "(":
            startpos = pos + 1
            bracket_count = 1
            pos += 1
            while bracket_count:
                if string[pos] == "(":
                    bracket_count += 1
                if string[pos] == ")":
                    bracket_count -= 1
                pos += 1
            args.append(expr_calc(string[startpos : pos-1]))
        else:
            num = 0
            while pos < len(string) and string[pos] in "0123456789":
                num = num * 10 + int(string[pos])
                pos += 1
            args.append((fr.Fraction(num), ONE))
        
        if math.isnan(args[-1][0]):
            return NAN, ONE
        args[-1] = (args[-1][0], args[-1][1] / (2**sqrts))
        facts = 0
        while pos < len(string) and string[pos] == "!":
            pos += 1
            facts += 1
        if facts:
            number, power = args[-1]
            if isinstance(power, float):
                if isinstance(number, float):
                    return NAN, ONE
                elif number == 1:
                    args[-1] = (ONE, ONE)
                elif number == 0 and power > 0:
                    args[-1] = (ZERO, ONE)
                else:
                    return NAN, ONE
            elif power == 0:
                if number != 0:
                    args[-1] = (ONE, ONE)
                else:
                    return NAN, ONE
            elif isinstance(number, float):
                return NAN, ONE
            elif power == 1:
                if number >= 0 and number.denominator == 1:
                    args[-1] = (fr.Fraction(number.numerator), ONE)
                else:
                    return NAN, ONE
            elif power == -1:
                if number > 0 and number.numerator == 1:
                    args[-1] = (fr.Fraction(number.denominator), ONE)
                else:
                    return NAN, ONE
            elif number == 0:
                if power <= 0:
                    return NAN, ONE
                else:
                    args[-1] = (ZERO, ONE)
            else:
                if power < 0:
                    args[-1] = (1 / number, -power)
                    number, power = args[-1]
                if number.denominator > 1:
                    return NAN, ONE
                elif number < 0 and (power.numerator % 2):
                    return NAN, ONE
                elif number.numerator in {0, 1}:
                    args[-1] = (fr.Fraction(number.numerator), ONE)
                elif power.denominator == 1:
                    args[-1] = (fr.Fraction(abs(number.numerator) ** power.numerator), ONE)
                else:
                    number, power, root = abs(number.numerator), power.numerator, power.denominator
                    approx = round(pow(number, 1 / root))
                    if approx ** root == number:
                        args[-1] = (fr.Fraction(approx ** power), ONE)
                    else:
                        return NAN, ONE
                    
            
            num = args[-1][0].numerator
            for i in range(facts):
                if num > 22201:
                    return NAN, ONE
                num = math.factorial(num)
            args[-1] = (fr.Fraction(num), ONE)
    i = 0
    while i < len(args) - 1:
        if ops[i+1] == "^":
            ev = evaluate_power(args[i+1])
            if (isinstance(ev, fr.Fraction) and ev == 0) or (isinstance(args[i][1], fr.Fraction) and args[i][1] == 0):
                args[i] = (args[i][0], ZERO)
            else:
                args[i] = (args[i][0], ev * args[i][1])
            args = args[:i+1] + args[i+2:]
            ops = ops[:i+1] + ops[i+2:]
            i -= 1
        i += 1
    i = 0
    while i < len(args) - 1:
        if ops[i+1] in "*/":
            if ops[i+1] == "/":
                args[i+1] = (args[i+1][0], -args[i+1][1])
            if args[i][1] < 0:
                if args[i][0] == 0:
                    return NAN, ONE
                args[i] = (1 / args[i][0], -args[i][1])
            if args[i+1][1] < 0:
                if args[i+1][0] == 0:
                    return NAN, ONE
                args[i+1] = (1 / args[i+1][0], -args[i+1][1])
            if args[i][1] == args[i+1][1]:
                if (isinstance(args[i][0], fr.Fraction) and args[i][0] == 0) or (isinstance(args[i+1][0], fr.Fraction) and args[i+1][0] == 0):
                    args[i] = (ZERO, args[i][1])
                else:
                    args[i] = (args[i][0] * args[i+1][0], args[i][1])
            else:
                ev1 = evaluate_power(args[i])
                ev2 = evaluate_power(args[i+1])
                if (isinstance(ev1, fr.Fraction) and ev1 == 0) or (isinstance(ev2, fr.Fraction) and ev2 == 0):
                    args[i] = (ZERO, ONE)
                else:
                    args[i] = (ev1 * ev2, ONE)
            args = args[:i+1] + args[i+2:]
            ops = ops[:i+1] + ops[i+2:]
            i -= 1
        i += 1
    while len(args) > 1:
        ev1 = evaluate_power(args[0])
        ev2 = evaluate_power(args[1])
        if ops[1] == "+":
            args[0] = (ev1 + ev2, ONE)
        else:
            args[0] = (ev1 - ev2, ONE)
        args = args[:1] + args[2:]
        ops = ops[:1] + ops[2:]
    return args[0]

def myEval(string, digit):
    tup = expr_check(string, digit)
    if tup[0] is None:
        return tup
    try:
        result = evaluate_power(expr_calc(tup[0]))
    except Exception:
        result = NAN
    if isinstance(result, fr.Fraction) and result.denominator == 1:
        result = result.numerator
    return (result, tup[1], tup[2])